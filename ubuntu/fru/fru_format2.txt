Commands to set fru EEPROM
=======================================

eepromtool -T sys_fru -M serial_number -V CNCES008730060 
eepromtool -T sys_fru -M part_number -V 04PVM1A01
eepromtool -T sys_fru -M sys_ser_tag -V 221ZZP1
eepromtool -T sys_fru -M asset_tag -V " "
eepromtool -T sys_fru -M board_rev_id -V A0
eepromtool -T sys_fru -M fan_cnt -V 05

FRU EEPROM without UUID
=======================================
root@dellemc-diag-os:/home/yana4600_4# hexdump -C sys.bin
00000000  01 01 00 07 10 00 00 e7  01 44 45 4c 4c 00 00 05  |.........DELL...|
00000010  02 02 00 00 02 18 cc 02  d2 20 00 d3 28 00 00 00  |......... ..(...|
00000020  d2 08 00 1d 01 08 00 00  d3 10 00 81 01 80 d8 9e  |................|
00000030  f3 bc 56 a0 00 00 00 00  01 09 00 32 b1 49 83 64  |..V........2.I.d|
00000040  c1 30 e0 56 45 50 2d 34  36 30 30 20 20 20 20 20  |.0.VEP-4600     |
00000050  20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20  |                |
00000060  20 20 20 ce 43 4e 43 45  53 30 30 38 37 33 30 30  |   .CNCES0087300|
00000070  36 30 c9 30 34 50 56 4d  31 41 30 31 01 00 c1 79  |60.04PVM1A01...y|
00000080  01 13 00 83 64 c1 30 e0  56 45 50 2d 34 36 30 30  |....d.0.VEP-4600|
00000090  20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20  |                |
000000a0  20 20 20 20 20 20 20 20  c2 30 30 c2 41 30 e0 32  |        .00.A0.2|
000000b0  32 31 5a 5a 50 31 20 20  20 20 20 20 20 20 20 20  |21ZZP1          |
000000c0  20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 ff  |               .|
000000d0  20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20  |                |
*
00000100  20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 c0  |               .|
00000110  c1 00 00 00 00 00 00 d3                           |........|
00000118

FRU EEPROM with UUID
=======================================
root@dellemc-diag-os:/home/yana4600_4# hexdump -C sys.bin
00000000  01 01 00 07 10 22 00 c5  01 44 45 4c 4c 00 00 05  |....."...DELL...|
                         --    --
00000010  02 02 00 00 02 18 cc 02  d2 20 00 d3 28 00 00 00  |......... ..(...|
00000020  d2 08 00 1d 01 08 00 00  d3 10 00 81 01 80 d8 9e  |................|
00000030  f3 bc 56 a0 00 00 00 00  01 09 00 34 b1 49 83 64  |..V........4.I.d|
00000040  c9 b2 e0 56 45 50 2d 34  36 30 30 20 20 20 20 20  |...VEP-4600     |
00000050  20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20  |                |
00000060  20 20 20 ce 43 4e 43 45  53 30 30 38 37 33 30 30  |   .CNCES0087300|
00000070  36 30 c9 30 34 50 56 4d  31 41 30 31 01 00 c1 ed  |60.04PVM1A01....|
00000080  01 12 00 83 64 c9 b2 e0  56 45 50 2d 34 36 30 30  |....d...VEP-4600|
00000090  20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20  |                |
000000a0  20 20 20 20 20 20 20 20  00 c2 41 30 e0 32 32 31  |        ..A0.221|
000000b0  5a 5a 50 31 20 20 20 20  20 20 20 20 20 20 20 20  |ZZP1            |
000000c0  20 20 20 20 20 20 20 20  20 20 20 20 20 ff 20 20  |             .  |
000000d0  20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20  |                |
*
00000100  20 20 20 20 20 20 20 20  20 20 20 20 20 c0 c1 6c  |             ..l|
00000110  03 82 11 d0 9a 07 3f be  07 d4 0a 4b 01 4e ae 5f  |......?....K.N._|
00000120  da 72 97 ae d4 3b                                 |.r...;|
00000126

Analysis FRU EEPROM with UUID
=======================================
root@dellemc-diag-os:/home/yana4600_4# hexdump -C sys.bin
00000000  01 01 00 07 10 22 00 c5  01 44 45 4c 4c 00 00 05  |....."...DELL...|
          [fru_common_header    ]  [internal_area_hdr    
		  
00000010  02 02 00 00 02 18 cc 02  d2 20 00 d3 28 00 00 00  |......... ..(...|
                                ]  [element_hdr[]        ]
								
00000020  d2 08 00 1d 01 08 00 00  d3 10 00 81 01 80 d8 9e  |................|
          [element_info_fru_type]  [element_info_mac
		  
00000030  f3 bc 56 a0 00 00 00 00  01 09 00 34 b1 49 83 64  |..V........4.I.d|
                                ]  [board_info_area] [fru_type_length : Board Manufacturer

00000040  c9 b2 e0 56 45 50 2d 34  36 30 30 20 20 20 20 20  |...VEP-4600     |
              ] [fru_type_length : Board Product Name
			  
00000050  20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20  |                |
00000060  20 20 20 ce 43 4e 43 45  53 30 30 38 37 33 30 30  |   .CNCES0087300|
                   [fru_type_length: Board Serial Number]
				   
00000070  36 30 c9 30 34 50 56 4d  31 41 30 31 01 00 c1 ed  |60.04PVM1A01....|
                [fru_type_length: Board Part Number]    --Checksum
				
00000080  01 12 00 83 64 c9 b2 e0  56 45 50 2d 34 36 30 30  |....d...VEP-4600|
          [product_info_area
		  
00000090  20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20  |                |
000000a0  20 20 20 20 20 20 20 20  00 c2 41 30 e0 32 32 31  |        ..A0.221|
000000b0  5a 5a 50 31 20 20 20 20  20 20 20 20 20 20 20 20  |ZZP1            |
000000c0  20 20 20 20 20 20 20 20  20 20 20 20 20 ff 20 20  |             .  |
000000d0  20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20  |                |
*
00000100  20 20 20 20 20 20 20 20  20 20 20 20 20 c0 c1 6c  |             ..l|
                                        product_info_area]
										
00000110  03 82 11 d0 9a 07 3f be  07 d4 0a 4b 01 4e ae 5f  |......?....K.N._|
          [multirecord_area_hdr
00000120  da 72 97 ae d4 3b                                 |.r...;|
                          ]
00000126

0. total size
=======================================

fru_common_header + 
internal_info_area + element_info_fru_type + element_info_mac +
//chassis_info_area +
board_info_area + n * fru_type_length
product_info_area + n * fru_type_length
multirecord_area_hdr + management_access_uuid



1. fru_common_header
=======================================
fru_common_header Data: 
01 01 00 07 10 22 00 c5
-------------------
struct fru_common_header {
    uint8_t     format_version;          //01
    uint8_t     internal_use_offset;     //01 : off = 0x01 * 8 = 0x08
    uint8_t     chassis_info_offset;     //00 : NO
    uint8_t     board_info_offset;       //07 : off = 0x07 * 8 = 0x38
    uint8_t     product_info_offset;     //10 : off = 0x10 * 8 = 0x80
    uint8_t     multirecord_info_offset; //22 : off = 0x22 * 8 = 0x110
    uint8_t     pad;                     //00 
    uint8_t     checksum;                //c5
};


2. internal_info_area
=======================================
struct __attribute__ ((__packed__)) internal_info_area{
    struct internal_area_hdr hdr;
    struct element_hdr el_hdr[];
};

-------------------
internal_area_hdr data: 
                         01 44 45 4c 4c 00 00 05
02 02 00 00 02 18 cc 02  
-------------------
struct __attribute__ ((__packed__)) internal_area_hdr {
    uint8_t     format_version;  //01 : Internal Use Format Version
    char        format_type[4];  //44 45 4c 4c : DELL
    uint8_t     reserve[3];      //00 00 05    : 05 = Number of Fans
    uint8_t     header_rev_flag; //02 : Header Revision
    uint8_t     feature_flag;    //02 : Bit 1 set indicating the DELL Info header checksum is valid
    uint8_t     unit;            //00 : 0x00 indicates 1-byte units
    uint16_t    max_fru_size;    //00 02 : The maximum length of the FRU area (LSB, MSB)
    uint8_t     hdr_len;         //18 : Length of the Internal User Area
    uint8_t     hdr_sum;         //cc 
    uint8_t     element_cnt;     //02 : Number of elements
};

-------------------
element_hdr[] data: 8字节对齐
                         d2 20 00 d3 28 00 00 00
-------------------
struct __attribute__ ((__packed__)) element_hdr{
    uint8_t     type;    //d2 ： 0xD2 - BMC Management Info      
	                     //d3 ： 0xD3 - Management MAC Addresses
    uint16_t    offset;  //20 00   //28 00
};


3. element_info_fru_type
=======================================
element_info_fru_type data:
d2 08 00 1d 01 08 00 00
-------------------

struct __attribute__ ((__packed__)) element_info_fru_type{
    uint8_t ele_type;          //d2 ： 0xD2 - BMC Management Info  
    uint16_t ele_len;          //08 00 : Element Length
    uint8_t ele_cksum;         //1d
    uint8_t ele_rev;           //01
    uint8_t fru_card_type_id;  //08 : FRU Card Type ID = Planar
    uint8_t reserve[2];        //00 00
};

4. element_info_mac
=======================================
element_info_mac data: 8字节对齐
                         d3 10 00 81 01 80 d8 9e
f3 bc 56 a0 00 00 00 00
-------------------
struct __attribute__ ((__packed__)) element_info_mac{
    uint8_t ele_type;  //d3
    uint16_t ele_len;  //10 00
    uint8_t ele_cksum; //81
    uint8_t ele_rev;   //01
    uint8_t mac_cnt;   //80 : Number of Sequential MAC Addresses
    uint8_t mac_b[6];  //d8 9e f3 bc 56 a0
};

5. board_info_area
=======================================
board_info_area data:
                         01 09 00 34 b1 49 83 64
						                   --
c9 b2 e0 56 45 50 2d 34  36 30 30 20 20 20 20 20
      --
20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20   
20 20 20 ce 43 4e 43 45  53 30 30 38 37 33 30 30  
         --
36 30 c9 30 34 50 56 4d  31 41 30 31 01 00 c1 ed 
      --                             --    -- -- 
-------------------

struct __attribute__ ((__packed__)) board_info_area {
    uint8_t     format_version;  //01
    uint8_t     area_length;     //09 : len = 09 * 8 = 0x48
    uint8_t     language_code;   //00
    uint8_t     mfg_date[3];     //34 b1 49 : Number of minutes from 0:00 hrs since 1/1/1996. LSB first(Little Endian)
    struct fru_type_length tl[];
};

Board Manufacturer
-------------------
struct fru_type_length {
    uint8_t     type_length;     //83 : Type code = 6-bit ASCII packed. 
	                               10 00 0011 : Length = 3
    uint8_t     data[];          //64 c9 b2 : "Dell" encoded in 6-bit ASCII packed format.
};

Board Product Name
-------------------
struct fru_type_length {
    uint8_t     type_length;     //e0 : Type code = 8-bit ASCII + Latin 1. Examble number of data bytes = 32
	                               11 10 0000 : Length = 32
    uint8_t     data[];          //"VEP-4600"
};

Board Serial Number
-------------------
struct fru_type_length {
    uint8_t     type_length;     //ce : Type code = 8-bit ASCII + Latin 1. Examble number of data bytes = 14
	                               11 00 1110 : Length = 14
    uint8_t     data[];          //"XXXX"
};

Board Part Number
-------------------
struct fru_type_length {
    uint8_t     type_length;     //c9 : Type code = 8-bit ASCII + Latin 1. Examble number of data bytes = 9
	                               11 00 1001 : Length = 9
    uint8_t     data[];          //"XXXX"
};

-------------------
FRU File ID                      //01 : Type code = Unspecified
FRU File ID Data                 //00 : FRU File Version Identfication
End of Fields                    //c1 : End of Fields Indicator
Board Area Checksum              //


6. product_info_area
=======================================
01 12 00 83 64 c9 b2 e0  56 45 50 2d 34 36 30 30
         --          --
20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20
20 20 20 20 20 20 20 20  00 c2 41 30 e0 32 32 31
                         -- --       --
5a 5a 50 31 20 20 20 20  20 20 20 20 20 20 20 20
20 20 20 20 20 20 20 20  20 20 20 20 20 ff 20 20
                                        --
20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20
20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20
20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20
20 20 20 20 20 20 20 20  20 20 20 20 20 c0 c1 6c
                                        -- -- --

struct __attribute__ ((__packed__)) product_info_area {
    uint8_t     format_version;  //01
    uint8_t     area_length;     //12 : len = 12 * 8 = 0x90
    uint8_t     language_code;   //00
    struct fru_type_length tl[];
};

Board Manufacturer
-------------------
struct fru_type_length {
    uint8_t     type_length;     //83 : Type code = 6-bit ASCII packed. 
	                               10 000011 : Length = 3
    uint8_t     data[];          //64 c9 b2 : "Dell" encoded in 6-bit ASCII packed format.
};

Board Product Name
-------------------
struct fru_type_length {
    uint8_t     type_length;     //e0 : Type code = 8-bit ASCII + Latin 1. Examble number of data bytes = 32
	                               11 100000 : Length = 32
    uint8_t     data[];          //"VEP-4600"
};

System ID : Unused
-------------------
struct fru_type_length {
    uint8_t     type_length;     //00
    uint8_t     data[];          //NULL
};

Board Revision ID
-------------------
struct fru_type_length {
    uint8_t     type_length;     //c2 : Type code = 8-bit ASCII + Latin 1. Examble number of data bytes = 2
	                               11 000002 : Length = 2
    uint8_t     data[];          //NULL
};

System Service Tag
-------------------
struct fru_type_length {
    uint8_t     type_length;     //e0 : Type code = 8-bit ASCII + Latin 1. Examble number of data bytes = 32
	                               11 100000 : Length = 32
    uint8_t     data[];          //
};

Asset Tag
-------------------
struct fru_type_length {
    uint8_t     type_length;     //ff : Type code = 8-bit ASCII + Latin 1. Examble number of data bytes = 63
	                               11 111111 : Length = 63
    uint8_t     data[];          //
};

FRU File ID                      //c0 : Type code = Unspecified
End of Fields                    //c1 : End of Fields Indicator
Product Info Area Checksum       //


=======================================
multirecord_area_hdr data:
03 82 11 d0 9a 07 3f be  07 d4 0a 4b 01 4e ae 5f
da 72 97 ae d4 3b


struct __attribute__ ((__packed__)) multirecord_area_hdr {
    uint8_t     record_type_id;        //03
    uint8_t     record_format_version; //82
    uint8_t     record_length;         //11
    uint8_t     record_checksum;       //
    uint8_t     header_checksum;       //
};

struct __attribute__ ((__packed__)) management_access_uuid {
    uint8_t     subrecord_type;        //07
    uint8_t     uuid[16];              //
};

=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
v


