#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#============================
# 杨辉三角：
#============================
print('====杨辉三角====')
def triangles():
    n=0
    L=[1]
    while True:
        yield (L)
        L = [1] + [L[i] + L[i+1] for i in range(n) if i+1 <=n] + [1] 
        n = n + 1

n = 0
results = []
for t in triangles():
    print(t)
    results.append(t)
    n = n + 1
    if n == 10:
        break
if results == [
    [1],
    [1, 1],
    [1, 2, 1],
    [1, 3, 3, 1],
    [1, 4, 6, 4, 1],
    [1, 5, 10, 10, 5, 1],
    [1, 6, 15, 20, 15, 6, 1],
    [1, 7, 21, 35, 35, 21, 7, 1],
    [1, 8, 28, 56, 70, 56, 28, 8, 1],
    [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]
]:
    print('测试通过!')
else:
    print('测试失败!')

#============================
#用filter求素数
#
#计算素数的一个方法是埃氏筛法，它的算法理解起来非常简单：
#
#首先，列出从2开始的所有自然数，构造一个序列：
#2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...
#取序列的第一个数2，它一定是素数，然后用2把序列的2的倍数筛掉：
#取新序列的第一个数3，它一定是素数，然后用3把序列的3的倍数筛掉：
#取新序列的第一个数5，然后用5把序列的5的倍数筛掉：
#不断筛下去，就可以得到所有的素数。
#============================
print('====用filter求素数====')

#构造一个从3开始的奇数序列
def _odd_iter():
    n = 1
    while True:
        n = n + 2
        yield n
                                        
#定义一个筛选函数：     
def _not_divisible(n):
    return lambda x: x % n > 0

#定义一个生成器，不断返回下一个素数
def primes():
    yield 2
    it = _odd_iter() # 初始序列
    while True:
        n = next(it) # 返回序列的第一个数
        yield n
        it = filter(_not_divisible(n), it) # 构造新序列

# 打印100以内的素数:
for n in primes():
    if n < 50:
        print(n)
    else:
        break
#============================
#============================
#============================
#============================
#============================
#============================
